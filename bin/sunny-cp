#! /usr/bin/env python
'''
sunny-cp: a CP portfolio solver consisting of 8 constituent solvers:

  Chuffed, CPX, G12/LazyFD, G12/FD, G12/Gurobi, G12/CBC, Gecode, MinisatID

*******************************************************************************
Note that the MiniZinc model in input MUST NOT contain the reserved keyword
o__b__j__v__a__r and the output produced is not formatted (in this regard, is 
possible to use the solns2out tool of MiniZinc suite for formatting the output)
*******************************************************************************
Don't forget to properly set the SUNNY_HOME and PATH environment variables!!!
*******************************************************************************
  
Usage: sunny-cp [OPTIONS] <MODEL.mzn> [DATA.dzn] 

Options:

  -h, --help  		
    Print this message
    
  -T <timeout>
    Timeout (in seconds) of SUNNY algorithm. Note that this IS NOT the timeout 
    of the whole solving process: if the instance is still not solved within T 
    seconds by the scheduled solvers, the others non-scheduled solvers of the 
    portfolio will be executed for T seconds following a default ordering. 
    Anyway, note that none of the solvers will be executed for more than T 
    seconds.
    The default value is T = 1800, while the default 'backup' ordering is:
      chuffed, g12cpx, minisatid, gecode, g12lazyfd, g12fd, g12gurobi, g12cbc    
  
  -k <size>
    Neighborhood size of SUNNY underlying k-NN algorithm. The default value of 
    k is 70, while the distance metric is the Euclidean one
  
  -P <portfolio>
    Specifies the portfolio through a comma-separated list of solvers of the 
    form s_1,s_2,...,s_m. Note that such solvers must be a not empty subset of 
    the default portfolio. Moreover, also the specified ordering of solvers is 
    important: indeed, in case of failure of the scheduled solvers, the other 
    solvers will be executed according to such ordering. This option can be used 
    to select a particular sub-portfolio or even to change the default ordering 
    of the solvers in case of failures
  
  -b <solver>
    Set the backup solver of the portfolio. The default backup solver is chuffed
    
  -K <path>
    Absolute path of the folder which contains the knowledge bases. The default 
    knowledge bases are in SUNNY_HOME/kb/all. For more details, see the README 
    file in SUNNY_HOME/kb folder
  
  -s <schedule>
    Specifies a static schedule to be run before executing the SUNNY algorithm 
    on a given COP. The schedule must be passed in the form: 
      s_1,t_1,s_2,t_2,...,s_m,t_m
    where each s_i belongs to the specified portfolio, 0 < t_i <= T, and 
    C = t_1 + ... + t_m <= T, where T is the specified solving timeout for COPs. 
    Passing a static schedule has the purpose of providing a 'warm start' to the 
    SUNNY algorithm in the first C seconds: first s_1 is run for t_1 seconds, 
    then s_2 is run for t_2 seconds, ..., and finally s_m is run for t_m seconds 
    by exploiting each sub-optimal solution found by the previous solver. If the 
    problem is still not solved after running the static schedule, the schedule 
    resulting from SUNNY algorithm is run in the remaining T - C seconds. The 
    static schedule is empty by default
    
  -d <path> 
    Absolute path of the folder in which the temporary files created by the 
    solver will be put. The default directory is SUNNY_HOME/tmp, and by default 
    such files are deleted after sunny-cp execution
    
  --keep
    Do not erase the temporary files created by the solver and stored in the 
    specified directory. This option is unset by default.
'''

import os
import sys
import getopt
import signal
import traceback
from subprocess import Popen, PIPE
from socket     import gethostname
from string	import replace

# SUNNY_HOME environment variable must be set!!!
SUNNY_HOME = os.environ['SUNNY_HOME']
sys.path.append(SUNNY_HOME + '/src')
from sunny_alg  import *
from sunny_exe  import *

# If KEEP == True, do not remove temporary files.
KEEP = False
# Directory where temporary files will put.
TMP_DIR = SUNNY_HOME + '/tmp'
# Unique identifier of temporary files.
TMP_ID = TMP_DIR + '/tmp_' + gethostname() + '_' + str(os.getpid())
# Variable artificially introduced for keeping track of the objective function.
OBJ_VAR = 'o__b__j__v__a__r'

def handler(signum = None, frame = None):
  """
  Handles termination signals.
  """
  print >> sys.stderr, '% Signal handler called with signal',signum
  clean()
  sys.exit(signum)
for sig in [signal.SIGTERM, signal.SIGINT, signal.SIGHUP, signal.SIGQUIT]:
  signal.signal(sig, handler)

def clean():
  """
  Utility for (possibly) cleaning temporary files and stopping the solver 
  execution at the end of the solving process (even when the termination is 
  forced externally).
  """
  global KEEP, TMP_DIR, TMP_ID
  # Get the PID of the solver currently in execution (see sunny_exe.py).
  pid = get_pid()
  if pid:
    try:
      os.killpg(pid, signal.SIGKILL)
    except OSError:
      pass
  name = os.path.splitext(os.path.basename(TMP_ID))[0]
  # Possibly remove temporary files.
  if not KEEP:
    for f in os.listdir(TMP_DIR):
      if os.path.splitext(f)[0] == os.path.basename(TMP_ID):
	os.remove(TMP_DIR + '/' + f)  
  sys.stdout.close() 

def extract_features(mzn, dzn):
  """
  Extracts the features from a MiniZinc model by exploiting the mzn2feat
  features extractor.
  """
  cmd = 'mzn2feat -i ' + mzn
  if dzn:
    cmd += ' -d ' + dzn
  proc = Popen(cmd.split(), stdout = PIPE)
  (out, err) = proc.communicate()
  # Failure in features extraction.
  if proc.returncode != 0:
    return None
  features = out.split(",")
  feat_vector = [float(features[i]) for i in range(1, len(features))]
  return feat_vector

def main(args):
  global SUNNY_HOME, KEEP, TMP_DIR, TMP_ID
  # Default values. Despite default values are the same for both CSPs and COPs, 
  # it is however possible to differentiate them.
  dzn = ''
  k_csp = 70
  k_cop = 70
  T_csp = 1800
  T_cop = 1800
  pfolio_csp = [
    'chuffed',  'g12cpx', 'minisatid', 'gecode',
    'g12lazyfd', 'g12fd', 'g12gurobi', 'g12cbc'
  ]
  pfolio_cop = [
    'chuffed',  'g12cpx', 'minisatid', 'gecode',
    'g12lazyfd', 'g12fd', 'g12gurobi', 'g12cbc'
  ]
  backup_csp = 'chuffed'
  backup_cop = 'chuffed'
  kb_csp = SUNNY_HOME + '/kb/all/kb_csp_all'
  kb_cop = SUNNY_HOME + '/kb/all/kb_cop_all'
  lims_csp = SUNNY_HOME + '/kb/all/lims_csp_all'
  lims_cop = SUNNY_HOME + '/kb/all/lims_cop_all'
  static = []
  obj_var = ''
  
  # Getting arguments.
  try:
    opts, args = getopt.getopt(
      args, 'ahT:k:P:b:K:s:d:p:', ['help', 'keep']
    )
  except getopt.error, msg:
    print msg
    print >> sys.stderr, 'For help use --help'
    sys.exit(2)
  
  if len(args) == 0:
    for o, a in opts:
      if o in ('-h', '--help'):
        print __doc__
        return
    print >> sys.stderr, 'Error! No arguments given.'
    print >> sys.stderr, 'For help use --help'
    sys.exit(2)
  mzn = args[0]
  if not mzn.endswith('.mzn'):
    print >> sys.stderr, 'Error! MiniZinc input model must have .mzn extension.'
    print >> sys.stderr, 'For help use --help'
    sys.exit(2)
  if len(args) > 1:
    dzn = args[1]
    if not dzn.endswith('.dzn'):
      print >> sys.stderr, \
      'Error! MiniZinc input data must have .dzn extension.'
      print >> sys.stderr, 'For help use --help'
      sys.exit(2)
  
  # Setting arguments.
  k = k_csp
  T = T_csp
  pfolio = pfolio_csp
  backup = backup_csp
  kb = kb_csp
  lims = lims_csp
  obj = 'sat'
  solve_item = False
  output_item = False
  include_list = [mzn]
  out_mzn = None
  # Possibly extract solve and output items (for COPs).
  while include_list and not (solve_item and output_item):
    model = include_list.pop()
    if os.path.exists(model):
      lines = open(model, 'r').read().split(';')
    else:
      continue
    for line in lines:
      include = False
      new_line = ''
      ignore = False
      for l in line:
	# Ignore comments.
        if ignore or l == '%':
          ignore = True
          if l == '\n':
            ignore = False
        else:
          new_line += l
      tokens = new_line.split()
      i = 0
      for token in tokens:
        if token == 'include' or token == 'include"':
          include = True
        # Looking for included models.
        if include and token[-1] == '"' or token[-1] == '";':
	  include = \
	    replace(replace(replace(token, 'include"', ''),'"', ''), "'", '')
	  include_list.append(include)
          include = False
	elif token.endswith('satisfy'):
	  include_list = []
	  break
	elif token in ['minimize', 'maximize']:
	  solve_item = True
	  k = k_cop
	  T = T_cop
	  pfolio = pfolio_cop
	  backup = backup_cop
	  kb = kb_cop
	  lims = lims_cop
	  if token == 'minimize':
	    obj = 'min'
	  else:
	    obj = 'max'
          obj_var = ''
          for j in range(i + 1, len(tokens)):
	    obj_var += tokens[j] + ' '
	  if output_item:
	    include_list = []
	    break
	elif token in ['output', 'output[']:
	  out_mzn = model
          output_item = True
	  if solve_item:
	    include_list = []
	    break
        i += 1
 
  # Arguments parsing.
  for o, a in opts:
    if o in ('-h', '--help'):
      print __doc__
      return
    # FIXME: Manage better -a and -p options:
    elif o == '-a':
      if obj == 'sat':
	print >> sys.stderr, 'Warning: ignoring -a option'
    elif o == '-p':
      print >> sys.stderr, 'Warning: ignoring -p option (parallel solving ' \
                           'not yet implemented, -p is fixed to 1)'
    elif o == '-k':
      k = int(a)
      if k < 0:
	print >> sys.stderr, 'Error! Negative value ' + a + ' for k value.'
	print >> sys.stderr, 'For help use --help'
	sys.exit(2)
    elif o == '-T':
      T = int(a)
      if T <= 0:
	print >> sys.stderr, 'Error! Non-positive value ' + a + ' for timeout.'
	print >> sys.stderr, 'For help use --help'
	sys.exit(2)
    elif o == '-P':
      p = a.split(',')
      if not p:
	print >> sys.stderr, \
	'Error! The portfolio ' + a + ' is not valid.'
	print >> sys.stderr, 'For help use --help'
	sys.exit(2)
      if not set(p) <= set(pfolio):
	print >> sys.stderr, \
	'Error! The portfolio ' + a + ' is not a subset of ' + str(pfolio)
	print >> sys.stderr, 'For help use --help'
	sys.exit(2)
      pfolio = p
    elif o == '-b':
      backup = a
    elif o == '-K':
      if not os.path.exists(a):
	print >> sys.stderr, 'Error! Directory ' + a + ' not exists.'
	print >> sys.stderr, 'For help use --help'
	sys.exit(2)
      name = [token for token in a.split('/') if token][-1]
      if a[-1] != '/':
	path = a + '/'
      else:
	path = a
      if obj in ['min', 'max']:
	pb = 'cop'
      else:
        pb = 'csp'
      kb = path + 'kb_' + pb + '_' + name
      lims = path + 'lims_' + pb + '_' + name
      if not os.path.exists(kb):
	print >> sys.stderr, 'Error! File ' + kb + ' not exists.'
	print >> sys.stderr, 'For help use --help'
	sys.exit(2)
      if not os.path.exists(lims):
	print >> sys.stderr, 'Error! File ' + kb + ' not exists.'
	print >> sys.stderr, 'For help use --help'
	sys.exit(2)
    elif o == '-s':
      s = a.split(',')
      for i in range(0, len(s) / 2):
	static.append((s[2 * i], int(s[2 * i + 1])))
    elif o == '-d':
      if not os.path.exists(a):
	print >> sys.stderr, 'Error! Directory ' + a + ' not exists.'
	print >> sys.stderr, 'For help use --help'
	sys.exit(2)
      name = [token for token in a.split('/') if token][-1]
      if a[-1] == '/':
	TMP_DIR = a[0 : -1]
      else:
	TMP_DIR = a
    elif o == '--keep':
      KEEP = True
      
  # Additional checks.
  if backup not in pfolio:
    print >> sys.stderr, \
    'Error! Backup solver ' + backup + ' is not in ' + str(pfolio)
    print >> sys.stderr, 'For help use --help'
    sys.exit(2)
  if not (set(s for (s, t) in static) <= set(pfolio)):
    print >> sys.stderr, \
    'Error! Static schedule is not a subset of ' + str(pfolio)
    print >> sys.stderr, 'For help use --help'
    sys.exit(2)
  st = 0
  for (s, t) in static:
    st += t
    if t <= 0 or t > T:
      print >> sys.stderr, \
      'Error! Not valid time slot ' + t + ' for static schedule'
      print >> sys.stderr, 'For help use --help'
      sys.exit(2)
    if s not in pfolio:
      print >> sys.stderr, 'Error! Solver ' + s + ' is not in ' + str(pfolio)
      print >> sys.stderr, 'For help use --help'
      sys.exit(2)
  if st > T:
    print >> sys.stderr, \
    'Error! Static schedule allocated time exceeds the timeout'
    print >> sys.stderr, 'For help use --help'
  
  # Here the solving process starts.
  try:
    print '% Extracting features...'
    feat_vector = extract_features(mzn, dzn)
    if not feat_vector:
      print '% Features extraction failed! Switching to backup solver(s).'
      schedule = [(s, T) for s in pfolio]
      exe_schedule(schedule, mzn, dzn, obj, obj_var, None, TMP_ID, out_mzn, T)
    else:
      print '% Computing solvers schedule...'
      schedule = get_schedule(
	feat_vector, k, T, pfolio, backup, kb, lims, obj, static
      )
      print '% Resulting schedule:',schedule
      print '% Executing solvers...'
      obj_bound = exe_schedule(
	schedule, mzn, dzn, obj, obj_var, None, TMP_ID, out_mzn, T
      )
      print '% Search not completed by scheduled solvers! Trying others.'
      others = [
	(s, T) for s in pfolio if s not in [s1 for (s1, t1) in schedule]
      ]
      exe_schedule(
        others, mzn, dzn, obj, obj_var, obj_bound, TMP_ID, out_mzn, T
      )
  except SearchCompleted:
    # Everything went well.
    clean()
    return 0
  except Exception as e:
    print >> sys.stderr, '% Unexpected Termination of sunny-cp.'
    clean()
    #traceback.print_exc()
    #print e
    return 1
  clean()
  
if __name__ == '__main__':
  main(sys.argv[1:])
