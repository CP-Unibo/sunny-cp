#! /usr/bin/env python
'''
sunny-cp executable module.
'''

import os
import sys
import time
import fcntl
import psutil
import signal
import traceback
import multiprocessing
from subprocess import Popen, PIPE

SUNNY_HOME = os.environ['SUNNY_HOME']
sys.path.append(SUNNY_HOME + '/src')
from problem        import *
from parsing        import *
from features       import *
from scheduling     import *
from pfolio_solvers import *

# Global variables keeping track of the current problem and the running solvers.
PROBLEM = None
RUNNING_SOLVERS = {}

# RUNNING_SOLVERS Indexes.
CMD = 0
PROCESS = 1
FLATZINC = 2
START_TIME = 3
TIMEOUT = 4
SOLUTION_TIME = 5
SOLUTION = 6
OBJ_VALUE = 7

# Sleep time (in seconds) for multiprocessing.
SLEEP_TIME = 0.1

def handler(signum = None, frame = None):
  """
  Handles termination signals.
  """
  print >> sys.stderr, '% Signal handler called with signal',signum
  clean()
  sys.exit(signum)
for sig in [signal.SIGTERM, signal.SIGINT, signal.SIGHUP, signal.SIGQUIT]:
  signal.signal(sig, handler)

def clean():
  """
  Utility for (possibly) cleaning temporary files and stopping the solvers 
  execution at the end of the solving process (even when the termination is 
  forced externally).
  """
  
  for info in RUNNING_SOLVERS.values():
    proc = info[PROCESS]
    if proc.poll() is None:
      pid = proc.pid
      process = psutil.Process(pid)
      for proc in process.get_children(recursive = True):
        proc.kill()
      process.kill()
  
  # Possibly remove temporary files.
  if PROBLEM and not PROBLEM.keep:
    if os.path.exists(PROBLEM.mzn_cpy):
      os.remove(PROBLEM.mzn_cpy)
    for f in PROBLEM.fzns.values():
      if os.path.exists(f):
        os.remove(f)
    if os.path.exists(PROBLEM.ozn):
      os.remove(PROBLEM.ozn)
  sys.stdout.close()

def run_schedule(par_schedule, cores, wait_time, restart_time):
  """
  Runs (possibly in parallel on different cores) a schedule of solvers.
  """
  if PROBLEM.isCOP():
    # Make a copy of the original MiniZinc model.
    PROBLEM.make_mzn_cpy()
  
  # Launch the mzn2fzn conversion.
  for _ in range(cores):
    (s, t) = par_schedule.pop(0)   
    print '% Starting',s,'for',str(t),'seconds'
    mzn2fzn(s, t)
  
  # The actual solvers execution starts here.
  while RUNNING_SOLVERS:
    time.sleep(SLEEP_TIME)
    
    for (solver, info) in RUNNING_SOLVERS.items():
      # Read and process lines from the output stream of each process.
      lines = read_lines(info)  
      if lines:
	process_output(solver, info, lines)
      
      # Solver process terminated or expired timeout.
      if info[PROCESS].poll() is not None:
        solver_terminated(solver, info, par_schedule)
      
      # Expired timeout.
      if time.time() - info[START_TIME] > info[TIMEOUT] and \
	 time.time() - info[SOLUTION_TIME] > wait_time:
	   solver_timeout(solver, par_schedule)
      
      # Restart the solver if its solution is obsolete.
      if PROBLEM.bound_better_than(info[OBJ_VALUE]) and \
	 time.time() - info[SOLUTION_TIME] > restart_time:
	   print '% Restarting',solver
	   restart_solver(solver, info)

def read_lines(info):
  """
  Returns the read lines of the process.
  """
  try:
    return info[PROCESS].stdout.read()
  except:
    return ''

def process_output(solver, info, lines):
  """
  Processes the output of a solver.
  """
  global RUNNING_SOLVERS
  for line in lines.split('\n'):
    if line == '----------':
      if PROBLEM.isCSP():
	print '%',solver,'found a solution'
	for s in info[SOLUTION]:
	  print s
	print line
	clean()
        sys.exit(0)
      if PROBLEM.bound_worse_than(info[OBJ_VALUE]):
	# The objective value found is the best so far.
	PROBLEM.best_bound = info[OBJ_VALUE]
	print '%',solver,'found a new solution'
	for s in info[SOLUTION]:
	  print s
	print line
	RUNNING_SOLVERS[solver][SOLUTION] = []
      RUNNING_SOLVERS[solver][SOLUTION_TIME] = time.time()
    elif line == '==========' or line == '=====UNSATISFIABLE=====':
      if PROBLEM.has_bound():
	print line
      else:
	print '=========='
      print '% Search completed by',solver
      clean()
      sys.exit(0)
    elif ' = ' in line:
      if PROBLEM.AUX_VAR in line:
	# Actual objective value.
	RUNNING_SOLVERS[solver][OBJ_VALUE] = int(
	  line[line.index(' = ') + 3 : len(line)].split(';')[0]
	)
	line = '% ' + line
      RUNNING_SOLVERS[solver][SOLUTION].append(line)
      RUNNING_SOLVERS[solver][SOLUTION_TIME] = time.time()

def solver_terminated(solver, info, par_schedule):
  '''
  Handles the termination of a solver process.
  '''
  if info[CMD] == 'mzn2fzn':
    if info[PROCESS].returncode == 0:
      print '% MiniZinc model converted by',solver + '.',
      timeout = info[TIMEOUT] - (time.time() - info[START_TIME])
      print 'Starting the FlatZinc execution for',str(timeout),'seconds'
      flatzinc(solver, timeout)
    else:
      print '% Error! MiniZinc model not converted by',solver
      del RUNNING_SOLVERS[solver]
      # Launch a new solver if any.
      new_solver = None
      while par_schedule:
	(new_solver, t) = par_schedule.pop(0)
	if new_solver == solver:
	  continue
	else:
	  t += info[TIMEOUT] + info[START_TIME] - time.time()
	  print '% Starting',new_solver,'for',str(t),'seconds'
	  mzn2fzn(new_solver, t)
	  break
  else:
    # Unexpected termination of solver execution.
    print '% Error: solver',solver,'failed unexpectedly'
    del RUNNING_SOLVERS[solver]
    # Launch a new solver if any.
    new_solver = None
    while par_schedule:
      (new_solver, t) = par_schedule.pop(0)
      if new_solver == solver:
	continue
      else:
	t += info[TIMEOUT] + info[START_TIME] - time.time()
	print '% Starting',new_solver,'for',str(t),'seconds'
	mzn2fzn(new_solver, t)
	break

def solver_timeout(solver, par_schedule):
  print '%',solver,'timeout'
  global RUNNING_SOLVERS
  del RUNNING_SOLVERS[solver]
  # Launch a new solver if any.
  new_solver = None
  if par_schedule:
    (new_solver, timeout) = par_schedule.pop(0)
    print '% Starting',new_solver,'for',str(timeout),'seconds'
    mzn2fzn(new_solver, timeout)

def mzn2fzn(solver, timeout):
  """
  Converts the MiniZinc model to the solver-specific FlatZinc model.
  """
  global RUNNING_SOLVERS
  solver = eval(solver + '()')
  name = solver.name
  RUNNING_SOLVERS[name] = {}
  RUNNING_SOLVERS[name][CMD] = 'mzn2fzn'
  fzn = PROBLEM.TMP_ID + '.' + name + '.fzn'
  PROBLEM.fzns[name] = fzn
  RUNNING_SOLVERS[name][FLATZINC] = solver.flatzinc_cmd(PROBLEM)
  RUNNING_SOLVERS[name][SOLUTION] = []
  if PROBLEM.has_bound():
    bound = PROBLEM.best_bound
    print '% Injecting value',bound,'to',solver
    PROBLEM.inject_bound_mzn(bound)
    RUNNING_SOLVERS[name][OBJ_VALUE] = bound
  else:
    RUNNING_SOLVERS[name][OBJ_VALUE] = None
  RUNNING_SOLVERS[name][SOLUTION_TIME] = time.time()
  RUNNING_SOLVERS[name][TIMEOUT] = timeout
  RUNNING_SOLVERS[name][START_TIME] = time.time()
  RUNNING_SOLVERS[name][PROCESS] = Popen(solver.mzn2fzn_cmd(PROBLEM, fzn))

def flatzinc(solver, timeout, current_bound = None):
  """
  Executes the FlatZinc interpreter of a solver
  """
  global RUNNING_SOLVERS
  RUNNING_SOLVERS[solver][CMD] = 'flatzinc'
  RUNNING_SOLVERS[solver][SOLUTION] = []
  if PROBLEM.has_bound():
    bound = PROBLEM.best_bound
    print '% Injecting value',bound,'to',solver
    PROBLEM.inject_bound_fzn(solver, bound)
    RUNNING_SOLVERS[solver][OBJ_VALUE] = bound
  else:
    RUNNING_SOLVERS[solver][OBJ_VALUE] = None
  RUNNING_SOLVERS[solver][SOLUTION_TIME] = time.time()
  RUNNING_SOLVERS[solver][TIMEOUT] = timeout
  RUNNING_SOLVERS[solver][START_TIME] = time.time()
  RUNNING_SOLVERS[solver][PROCESS] = Popen(
    RUNNING_SOLVERS[solver][FLATZINC], stdout = PIPE
  )
  # Non blocking read.
  fd = RUNNING_SOLVERS[solver][PROCESS].stdout.fileno()
  fl = fcntl.fcntl(fd, fcntl.F_GETFL)
  fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

def main(args):
  global PROBLEM
  PROBLEM, k, timeout, pfolio, backup, kb, lims, static_sched, extractor, \
  cores, wait_time, restart_time = parse_arguments(args)
  
  try:
    print '% Extracting features...'
    feat_vector = extractor.extract_features([PROBLEM, lims])
  
    if not feat_vector:
      print '% Features extraction failed! Switching to backup solver(s).'
      dynamic_sched = [(s, float(timeout) / cores) for s in pfolio[0 : cores]]
    else:
      print '% Computing solvers schedule...'
      dynamic_sched = sunny(
        PROBLEM, pfolio, backup, feat_vector, k, timeout, kb
      )
      print '% SUNNY sequential schedule:',dynamic_sched
      
    not_scheduled = [s for s in pfolio if s not in dict(dynamic_sched).keys()]
    par_sched = parallelize(static_sched, dynamic_sched, cores, timeout) \
              + [(s, 0) for s in not_scheduled]
    print '% SUNNY parallel schedule:',par_sched
    print '% Executing solvers...'
    run_schedule(par_sched, cores, wait_time, restart_time)
    
  except Exception as e:
    print >> sys.stderr, '% Unexpected Termination of sunny-cp.'
    clean()
    traceback.print_exc()
    sys.exit(1)
    
  print '% Search not completed by any constituent solver. Bye!'
  clean()
  
if __name__ == '__main__':
  main(sys.argv[1:])
