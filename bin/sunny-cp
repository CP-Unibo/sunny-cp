#! /usr/bin/env python
'''
sunny-cp executable module.
'''

import os
import sys
import signal
import traceback
from subprocess import Popen, PIPE

SUNNY_HOME = os.environ['SUNNY_HOME']
sys.path.append(SUNNY_HOME + '/src')
from parsing   import *
from features  import *
from sunny_alg import *
from sunny_exe import *

# Global variable keeping track of the current problem.
PROBLEM = None

def handler(signum = None, frame = None):
  """
  Handles termination signals.
  """
  print >> sys.stderr, '% Signal handler called with signal',signum
  clean()
  sys.exit(signum)
for sig in [signal.SIGTERM, signal.SIGINT, signal.SIGHUP, signal.SIGQUIT]:
  signal.signal(sig, handler)

def clean():
  """
  Utility for (possibly) cleaning temporary files and stopping the solver 
  execution at the end of the solving process (even when the termination is 
  forced externally).
  """
  global PROBLEM
  # Get the PID of the solver currently in execution (see sunny_exe.py).
  pid = get_pid()
  if pid:
    try:
      os.killpg(pid, signal.SIGKILL)
    except OSError:
      pass
  # Possibly remove temporary files.
  if not PROBLEM.keep:
    if PROBLEM.mzn_copy:
      os.remove(PROBLEM.mzn_copy)
    for f in PROBLEM.fzns.values():
      os.remove(f)
    if PROBLEM.ozn:
      os.remove(PROBLEM.ozn)
  sys.stdout.close()

def main(args):
  # Parsing input arguments
  pb, k, T, pfolio, backup, kb, lims, static, extractor, cores = \
    parse_arguments(args)
  
  global PROBLEM
  PROBLEM = pb
  
  # Here the solving process starts.
  try:
    print '% Extracting features...'
    feat_vector = extractor.extract_features([pb, lims])
    print '*** WORK IN PROGRESS ***'
    # FIXME: From here refactoring is needed.
    return
    if not feat_vector:
      print '% Features extraction failed! Switching to backup solver(s).'
      schedule = [(s, T) for s in pfolio]
      exe_schedule(schedule, pb, T)
    else:
      print '% Computing solvers schedule...'
      schedule = get_schedule(
	feat_vector, k, T, pfolio, backup, kb, lims, obj, static
      )
      print '% Resulting schedule:',schedule
      print '% Executing solvers...'
      obj_bound = exe_schedule(schedule, pb, T)
      print '% Search not completed by scheduled solvers! Trying others.'
      others = [
	(s, T) for s in pfolio if s not in [s1 for (s1, t1) in schedule]
      ]
      exe_schedule(others, pb, T, obj_bound)
  except SearchCompleted:
    # Everything went well.
    clean()
    sys.exit(0)
  except Exception as e:
    print >> sys.stderr, '% Unexpected Termination of sunny-cp.'
    clean()
    traceback.print_exc()
    #print e
    sys.exit(1)
  clean()
  
if __name__ == '__main__':
  main(sys.argv[1:])
