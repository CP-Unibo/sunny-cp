#! /usr/bin/env python
'''
sunny-cp executable module.
'''

import os
import sys
import signal
import traceback
from subprocess import Popen, PIPE

SUNNY_HOME = os.environ['SUNNY_HOME']
sys.path.append(SUNNY_HOME + '/src')
from parsing   import *
from sunny_alg import *
from sunny_exe import *

def handler(signum = None, frame = None):
  """
  Handles termination signals.
  """
  print >> sys.stderr, '% Signal handler called with signal',signum
  clean()
  sys.exit(signum)
for sig in [signal.SIGTERM, signal.SIGINT, signal.SIGHUP, signal.SIGQUIT]:
  signal.signal(sig, handler)

def clean():
  """
  Utility for (possibly) cleaning temporary files and stopping the solver 
  execution at the end of the solving process (even when the termination is 
  forced externally).
  """
  global DEF_KEEP, DEF_TMP_DIR, DEF_TMP_ID
  # Get the PID of the solver currently in execution (see sunny_exe.py).
  pid = get_pid()
  if pid:
    try:
      os.killpg(pid, signal.SIGKILL)
    except OSError:
      pass
  name = os.path.splitext(os.path.basename(DEF_TMP_ID))[0]
  # Possibly remove temporary files.
  if not DEF_KEEP:
    for f in os.listdir(DEF_TMP_DIR):
      if os.path.splitext(f)[0] == os.path.basename(DEF_TMP_ID):
	os.remove(DEF_TMP_DIR + '/' + f)  
  sys.stdout.close() 

def extract_features(mzn, dzn):
  """
  Extracts the features from a MiniZinc model by exploiting the mzn2feat
  features extractor.
  """
  cmd = 'mzn2feat -i ' + mzn
  if dzn:
    cmd += ' -d ' + dzn
  proc = Popen(cmd.split(), stdout = PIPE)
  (out, err) = proc.communicate()
  # Failure in features extraction.
  if proc.returncode != 0:
    return None
  features = out.split(",")
  feat_vector = [float(features[i]) for i in range(1, len(features))]
  return feat_vector

def main(args):
  # Parsing input arguments
  mzn, dzn, obj, obj_var, out_mzn, \
  k, T, pfolio, backup, kb, lims, static = parse_arguments(args)
  
  # Here the solving process starts.
  try:
    print '% Extracting features...'
    feat_vector = extract_features(mzn, dzn)
    if not feat_vector:
      print '% Features extraction failed! Switching to backup solver(s).'
      schedule = [(s, T) for s in pfolio]
      exe_schedule(schedule, mzn, dzn, obj, obj_var, None, DEF_TMP_ID, out_mzn, T)
    else:
      print '% Computing solvers schedule...'
      schedule = get_schedule(
	feat_vector, k, T, pfolio, backup, kb, lims, obj, static
      )
      print '% Resulting schedule:',schedule
      print '% Executing solvers...'
      obj_bound = exe_schedule(
	schedule, mzn, dzn, obj, obj_var, None, DEF_TMP_ID, out_mzn, T
      )
      print '% Search not completed by scheduled solvers! Trying others.'
      others = [
	(s, T) for s in pfolio if s not in [s1 for (s1, t1) in schedule]
      ]
      exe_schedule(
        others, mzn, dzn, obj, obj_var, obj_bound, DEF_TMP_ID, out_mzn, T
      )
  except SearchCompleted:
    # Everything went well.
    clean()
    return 0
  except Exception as e:
    print >> sys.stderr, '% Unexpected Termination of sunny-cp.'
    clean()
    traceback.print_exc()
    #print e
    return 1
  clean()
  
if __name__ == '__main__':
  main(sys.argv[1:])
