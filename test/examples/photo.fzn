array [1..34] of int: prefs = [0, 2, 0, 4, 0, 7, 1, 4, 1, 8, 2, 3, 2, 4, 3, 0, 3, 4, 4, 5, 4, 0, 5, 0, 5, 8, 6, 2, 6, 7, 7, 8, 7, 6];
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00028 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00032 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00034 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00038 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00040 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00044 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00046 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00050 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00051 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00053 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00054 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00056 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00057 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00059 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00060 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00062 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00063 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..8: INT____00018 :: is_defined_var :: var_is_introduced;
array [1..17] of var bool: ful;
array [1..9] of var 0..8: pos :: output_array([0..8]);
var 0..8: satisfies :: output_var = INT____00018;
constraint bool2int(ful[1], INT____00001) :: defines_var(INT____00001);
constraint bool2int(ful[2], INT____00002) :: defines_var(INT____00002);
constraint bool2int(ful[3], INT____00003) :: defines_var(INT____00003);
constraint bool2int(ful[4], INT____00004) :: defines_var(INT____00004);
constraint bool2int(ful[5], INT____00005) :: defines_var(INT____00005);
constraint bool2int(ful[6], INT____00006) :: defines_var(INT____00006);
constraint bool2int(ful[7], INT____00007) :: defines_var(INT____00007);
constraint bool2int(ful[8], INT____00008) :: defines_var(INT____00008);
constraint bool2int(ful[9], INT____00009) :: defines_var(INT____00009);
constraint bool2int(ful[10], INT____00010) :: defines_var(INT____00010);
constraint bool2int(ful[11], INT____00011) :: defines_var(INT____00011);
constraint bool2int(ful[12], INT____00012) :: defines_var(INT____00012);
constraint bool2int(ful[13], INT____00013) :: defines_var(INT____00013);
constraint bool2int(ful[14], INT____00014) :: defines_var(INT____00014);
constraint bool2int(ful[15], INT____00015) :: defines_var(INT____00015);
constraint bool2int(ful[16], INT____00016) :: defines_var(INT____00016);
constraint bool2int(ful[17], INT____00017) :: defines_var(INT____00017);
constraint bool_xor(BOOL____00019, BOOL____00020, ful[1]);
constraint bool_xor(BOOL____00022, BOOL____00023, ful[2]);
constraint bool_xor(BOOL____00023, BOOL____00022, ful[11]);
constraint bool_xor(BOOL____00025, BOOL____00026, ful[3]);
constraint bool_xor(BOOL____00028, BOOL____00029, ful[4]);
constraint bool_xor(BOOL____00031, BOOL____00032, ful[5]);
constraint bool_xor(BOOL____00034, BOOL____00035, ful[6]);
constraint bool_xor(BOOL____00037, BOOL____00038, ful[7]);
constraint bool_xor(BOOL____00040, BOOL____00041, ful[8]);
constraint bool_xor(BOOL____00043, BOOL____00044, ful[9]);
constraint bool_xor(BOOL____00046, BOOL____00047, ful[10]);
constraint bool_xor(BOOL____00050, BOOL____00051, ful[12]);
constraint bool_xor(BOOL____00053, BOOL____00054, ful[13]);
constraint bool_xor(BOOL____00056, BOOL____00057, ful[14]);
constraint bool_xor(BOOL____00059, BOOL____00060, ful[15]);
constraint bool_xor(BOOL____00060, BOOL____00059, ful[17]);
constraint bool_xor(BOOL____00062, BOOL____00063, ful[16]);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00018, INT____00001, INT____00002, INT____00003, INT____00004, INT____00005, INT____00006, INT____00007, INT____00008, INT____00009, INT____00010, INT____00011, INT____00012, INT____00013, INT____00014, INT____00015, INT____00016, INT____00017], 0) :: defines_var(INT____00018);
constraint int_lin_eq_reif([-1, 1], [pos[1], pos[3]], -1, BOOL____00020) :: defines_var(BOOL____00020);
constraint int_lin_eq_reif([-1, 1], [pos[1], pos[4]], -1, BOOL____00040) :: defines_var(BOOL____00040);
constraint int_lin_eq_reif([-1, 1], [pos[1], pos[5]], -1, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_lin_eq_reif([-1, 1], [pos[1], pos[6]], -1, BOOL____00050) :: defines_var(BOOL____00050);
constraint int_lin_eq_reif([-1, 1], [pos[1], pos[8]], -1, BOOL____00026) :: defines_var(BOOL____00026);
constraint int_lin_eq_reif([-1, 1], [pos[2], pos[5]], -1, BOOL____00029) :: defines_var(BOOL____00029);
constraint int_lin_eq_reif([-1, 1], [pos[2], pos[9]], -1, BOOL____00032) :: defines_var(BOOL____00032);
constraint int_lin_eq_reif([-1, 1], [pos[3], pos[4]], -1, BOOL____00035) :: defines_var(BOOL____00035);
constraint int_lin_eq_reif([-1, 1], [pos[3], pos[5]], -1, BOOL____00038) :: defines_var(BOOL____00038);
constraint int_lin_eq_reif([-1, 1], [pos[3], pos[7]], -1, BOOL____00056) :: defines_var(BOOL____00056);
constraint int_lin_eq_reif([-1, 1], [pos[4], pos[5]], -1, BOOL____00044) :: defines_var(BOOL____00044);
constraint int_lin_eq_reif([-1, 1], [pos[5], pos[6]], -1, BOOL____00047) :: defines_var(BOOL____00047);
constraint int_lin_eq_reif([-1, 1], [pos[6], pos[9]], -1, BOOL____00054) :: defines_var(BOOL____00054);
constraint int_lin_eq_reif([-1, 1], [pos[7], pos[8]], -1, BOOL____00060) :: defines_var(BOOL____00060);
constraint int_lin_eq_reif([-1, 1], [pos[8], pos[9]], -1, BOOL____00063) :: defines_var(BOOL____00063);
constraint int_lin_eq_reif([1, -1], [pos[1], pos[3]], -1, BOOL____00019) :: defines_var(BOOL____00019);
constraint int_lin_eq_reif([1, -1], [pos[1], pos[4]], -1, BOOL____00041) :: defines_var(BOOL____00041);
constraint int_lin_eq_reif([1, -1], [pos[1], pos[5]], -1, BOOL____00022) :: defines_var(BOOL____00022);
constraint int_lin_eq_reif([1, -1], [pos[1], pos[6]], -1, BOOL____00051) :: defines_var(BOOL____00051);
constraint int_lin_eq_reif([1, -1], [pos[1], pos[8]], -1, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_lin_eq_reif([1, -1], [pos[2], pos[5]], -1, BOOL____00028) :: defines_var(BOOL____00028);
constraint int_lin_eq_reif([1, -1], [pos[2], pos[9]], -1, BOOL____00031) :: defines_var(BOOL____00031);
constraint int_lin_eq_reif([1, -1], [pos[3], pos[4]], -1, BOOL____00034) :: defines_var(BOOL____00034);
constraint int_lin_eq_reif([1, -1], [pos[3], pos[5]], -1, BOOL____00037) :: defines_var(BOOL____00037);
constraint int_lin_eq_reif([1, -1], [pos[3], pos[7]], -1, BOOL____00057) :: defines_var(BOOL____00057);
constraint int_lin_eq_reif([1, -1], [pos[4], pos[5]], -1, BOOL____00043) :: defines_var(BOOL____00043);
constraint int_lin_eq_reif([1, -1], [pos[5], pos[6]], -1, BOOL____00046) :: defines_var(BOOL____00046);
constraint int_lin_eq_reif([1, -1], [pos[6], pos[9]], -1, BOOL____00053) :: defines_var(BOOL____00053);
constraint int_lin_eq_reif([1, -1], [pos[7], pos[8]], -1, BOOL____00059) :: defines_var(BOOL____00059);
constraint int_lin_eq_reif([1, -1], [pos[8], pos[9]], -1, BOOL____00062) :: defines_var(BOOL____00062);
constraint int_lt(pos[1], pos[2]);
constraint int_ne(pos[1], pos[2]);
constraint int_ne(pos[1], pos[3]);
constraint int_ne(pos[1], pos[4]);
constraint int_ne(pos[1], pos[5]);
constraint int_ne(pos[1], pos[6]);
constraint int_ne(pos[1], pos[7]);
constraint int_ne(pos[1], pos[8]);
constraint int_ne(pos[1], pos[9]);
constraint int_ne(pos[2], pos[3]);
constraint int_ne(pos[2], pos[4]);
constraint int_ne(pos[2], pos[5]);
constraint int_ne(pos[2], pos[6]);
constraint int_ne(pos[2], pos[7]);
constraint int_ne(pos[2], pos[8]);
constraint int_ne(pos[2], pos[9]);
constraint int_ne(pos[3], pos[4]);
constraint int_ne(pos[3], pos[5]);
constraint int_ne(pos[3], pos[6]);
constraint int_ne(pos[3], pos[7]);
constraint int_ne(pos[3], pos[8]);
constraint int_ne(pos[3], pos[9]);
constraint int_ne(pos[4], pos[5]);
constraint int_ne(pos[4], pos[6]);
constraint int_ne(pos[4], pos[7]);
constraint int_ne(pos[4], pos[8]);
constraint int_ne(pos[4], pos[9]);
constraint int_ne(pos[5], pos[6]);
constraint int_ne(pos[5], pos[7]);
constraint int_ne(pos[5], pos[8]);
constraint int_ne(pos[5], pos[9]);
constraint int_ne(pos[6], pos[7]);
constraint int_ne(pos[6], pos[8]);
constraint int_ne(pos[6], pos[9]);
constraint int_ne(pos[7], pos[8]);
constraint int_ne(pos[7], pos[9]);
constraint int_ne(pos[8], pos[9]);
solve  :: int_search(pos, first_fail, indomain, complete) maximize INT____00018;
