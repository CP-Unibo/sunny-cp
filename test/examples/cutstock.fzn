array [1..3] of int: i_demand = [2, 2, 4];
array [1..3] of int: i_length = [7, 5, 3];
var 0..8: INT____00001 :: is_defined_var :: var_is_introduced;
array [1..24] of var int: items :: output_array([1..8, 1..3]);
var 0..8: obj :: output_var = INT____00001;
array [1..8] of var 0..1: pieces :: output_array([1..8]);
constraint int_le(0, items[1]);
constraint int_le(0, items[2]);
constraint int_le(0, items[3]);
constraint int_le(0, items[4]);
constraint int_le(0, items[5]);
constraint int_le(0, items[6]);
constraint int_le(0, items[7]);
constraint int_le(0, items[8]);
constraint int_le(0, items[9]);
constraint int_le(0, items[10]);
constraint int_le(0, items[11]);
constraint int_le(0, items[12]);
constraint int_le(0, items[13]);
constraint int_le(0, items[14]);
constraint int_le(0, items[15]);
constraint int_le(0, items[16]);
constraint int_le(0, items[17]);
constraint int_le(0, items[18]);
constraint int_le(0, items[19]);
constraint int_le(0, items[20]);
constraint int_le(0, items[21]);
constraint int_le(0, items[22]);
constraint int_le(0, items[23]);
constraint int_le(0, items[24]);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00001, pieces[1], pieces[2], pieces[3], pieces[4], pieces[5], pieces[6], pieces[7], pieces[8]], 0) :: defines_var(INT____00001);
constraint int_lin_le([7, 5, 3, -10], [items[1], items[2], items[3], pieces[1]], 0);
constraint int_lin_le([7, 5, 3, -10], [items[4], items[5], items[6], pieces[2]], 0);
constraint int_lin_le([7, 5, 3, -10], [items[7], items[8], items[9], pieces[3]], 0);
constraint int_lin_le([7, 5, 3, -10], [items[10], items[11], items[12], pieces[4]], 0);
constraint int_lin_le([7, 5, 3, -10], [items[13], items[14], items[15], pieces[5]], 0);
constraint int_lin_le([7, 5, 3, -10], [items[16], items[17], items[18], pieces[6]], 0);
constraint int_lin_le([7, 5, 3, -10], [items[19], items[20], items[21], pieces[7]], 0);
constraint int_lin_le([7, 5, 3, -10], [items[22], items[23], items[24], pieces[8]], 0);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1], [items[1], items[4], items[7], items[10], items[13], items[16], items[19], items[22]], -2);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1], [items[2], items[5], items[8], items[11], items[14], items[17], items[20], items[23]], -2);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1], [items[3], items[6], items[9], items[12], items[15], items[18], items[21], items[24]], -4);
solve minimize INT____00001;
