var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
array [1..9] of var bool: a :: output_array([1..3, 1..3]);
array [1..1] of var 1..3: s____00001;
array [1..1] of var 1..3: s____00007;
array [1..1] of var 1..3: s____00011;
array [1..1] of var 1..3: s____00014;
array [1..1] of var 1..3: s____00020;
array [1..1] of var 1..3: s____00024;
constraint array_bool_and([BOOL____00003, BOOL____00004], a[6]);
constraint array_bool_and([BOOL____00016, BOOL____00017], a[8]);
constraint bool_eq(a[3], true);
constraint bool_eq(a[7], true);
constraint int_le_reif(s____00001[1], 1, a[3]);
constraint int_le_reif(s____00001[1], 2, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_le_reif(s____00007[1], 1, a[2]);
constraint int_le_reif(s____00007[1], 2, a[5]);
constraint int_le_reif(s____00011[1], 1, a[1]);
constraint int_le_reif(s____00011[1], 2, a[4]);
constraint int_le_reif(s____00014[1], 1, a[7]);
constraint int_le_reif(s____00014[1], 2, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_le_reif(s____00020[1], 1, a[4]);
constraint int_le_reif(s____00020[1], 2, a[5]);
constraint int_le_reif(s____00024[1], 1, a[1]);
constraint int_le_reif(s____00024[1], 2, a[2]);
constraint int_lin_le([1], [s____00007[1]], 2);
constraint int_lin_le([1], [s____00011[1]], 1);
constraint int_lin_le([1], [s____00020[1]], 2);
constraint int_lin_le([1], [s____00024[1]], 1);
constraint int_lin_le_reif([-1], [s____00001[1]], -3, a[9]);
constraint int_lin_le_reif([-1], [s____00001[1]], -2, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_lin_le_reif([-1], [s____00007[1]], -2, a[8]);
constraint int_lin_le_reif([-1], [s____00014[1]], -3, a[9]);
constraint int_lin_le_reif([-1], [s____00014[1]], -2, BOOL____00017) :: defines_var(BOOL____00017);
constraint int_lin_le_reif([-1], [s____00020[1]], -2, a[6]);
solve satisfy;
